#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/*
            00  01  02
              03  04  
            05  06  07
              08  09  
            10  11  12
           F           R
13  14  15  26  27  28  39  40  41  52  53  54
  16  17      29  30      42  43      55  56  
18  19  20  31  32  33  44  45  46  57  58  59
  21  22      34  35      47  48      60  61  
23  24  25  36  37  38  49  50  51  62  63  64
          DF          DR
                        65  66  67
                          68  69  
                        70  71  72
                          73  74  
                        75  76  77
*/

int paletteOffset = 0x39;
int imageSize = 3039;
unsigned char pngImage[] = {
0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
0x00,0x00,0x01,0x04,0x00,0x00,0x00,0x83,0x08,0x03,0x00,0x00,0x00,0x5c,0x14,0x95,
0xec,0x00,0x00,0x00,0x04,0x67,0x41,0x4d,0x41,0x00,0x00,0xaf,0xc8,0x37,0x05,0x8a,
0xe9,0x00,0x00,0x00,0xf0,0x50,0x4c,0x54,0x45,0x00,0x00,0x00,0x01,0x01,0x01,0x02,
0x02,0x02,0x03,0x03,0x03,0x04,0x04,0x04,0x05,0x05,0x05,0x06,0x06,0x06,0x07,0x07,
0x07,0x08,0x08,0x08,0x09,0x09,0x09,0x0a,0x0a,0x0a,0x0b,0x0b,0x0b,0x0c,0x0c,0x0c,
0x0d,0x0d,0x0d,0x0e,0x0e,0x0e,0x0f,0x0f,0x0f,0x10,0x10,0x10,0x11,0x11,0x11,0x12,
0x12,0x12,0x13,0x13,0x13,0x14,0x14,0x14,0x15,0x15,0x15,0x16,0x16,0x16,0x17,0x17,
0x17,0x18,0x18,0x18,0x19,0x19,0x19,0x1a,0x1a,0x1a,0x1b,0x1b,0x1b,0x1c,0x1c,0x1c,
0x1d,0x1d,0x1d,0x1e,0x1e,0x1e,0x1f,0x1f,0x1f,0x20,0x20,0x20,0x21,0x21,0x21,0x22,
0x22,0x22,0x23,0x23,0x23,0x24,0x24,0x24,0x25,0x25,0x25,0x26,0x26,0x26,0x27,0x27,
0x27,0x28,0x28,0x28,0x29,0x29,0x29,0x2a,0x2a,0x2a,0x2b,0x2b,0x2b,0x2c,0x2c,0x2c,
0x2d,0x2d,0x2d,0x2e,0x2e,0x2e,0x2f,0x2f,0x2f,0x30,0x30,0x30,0x31,0x31,0x31,0x32,
0x32,0x32,0x33,0x33,0x33,0x34,0x34,0x34,0x35,0x35,0x35,0x36,0x36,0x36,0x37,0x37,
0x37,0x38,0x38,0x38,0x39,0x39,0x39,0x3a,0x3a,0x3a,0x3b,0x3b,0x3b,0x3c,0x3c,0x3c,
0x3d,0x3d,0x3d,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x40,0x40,0x40,0x41,0x41,0x41,0x42,
0x42,0x42,0x43,0x43,0x43,0x44,0x44,0x44,0x45,0x45,0x45,0x46,0x46,0x46,0x47,0x47,
0x47,0x48,0x48,0x48,0x49,0x49,0x49,0x4a,0x4a,0x4a,0x4b,0x4b,0x4b,0x4c,0x4c,0x4c,
0x4d,0x4d,0x4d,0x4e,0x4e,0x4e,0xff,0xff,0xff,0x22,0x6b,0xab,0x93,0x00,0x00,0x0a,
0x9a,0x49,0x44,0x41,0x54,0x78,0xda,0xec,0xdd,0x7b,0x93,0x1d,0xb5,0x11,0x05,0xf0,
0x03,0x09,0x8f,0x24,0x60,0xf0,0xc6,0x2c,0xd8,0xe6,0x02,0x06,0xdb,0x3c,0xd6,0xc0,
0x9a,0xa7,0x6d,0xc0,0xd8,0x2c,0x09,0xaf,0x84,0xfd,0xfe,0xdf,0x26,0xa3,0xd1,0x48,
0xd3,0xdd,0x92,0x5a,0xdd,0x73,0xe7,0xce,0x25,0x55,0xf4,0xbf,0xae,0xda,0x99,0xfd,
0xf9,0x9c,0x79,0xd9,0x25,0xe1,0xf2,0xcf,0xb9,0xc4,0x1f,0xe2,0x47,0x1c,0xf9,0xf8,
0x7b,0xff,0x04,0xe0,0x2f,0x38,0x26,0x03,0xc2,0x1c,0x17,0x61,0x20,0x08,0x73,0x34,
0x06,0xe0,0xa3,0x8f,0xf0,0xe5,0x97,0x7b,0x1e,0x1f,0x2b,0x10,0x1c,0x8d,0x21,0x10,
0x8c,0x08,0x7b,0x32,0x60,0x15,0x82,0xa3,0x30,0x44,0x82,0x09,0x61,0x2f,0x06,0xac,
0x44,0xb0,0x39,0x43,0x22,0xc8,0x08,0x7b,0x30,0x60,0x35,0x82,0x4d,0x19,0x66,0x02,
0x82,0xb0,0x98,0x01,0x2b,0x12,0x6c,0xc6,0x40,0x09,0x18,0xc2,0x42,0x06,0xac,0x4a,
0xb0,0x09,0x03,0x27,0x10,0x08,0x8b,0x18,0xe0,0x3f,0x05,0xc3,0x1c,0x94,0xe0,0x9e,
0x50,0x80,0x30,0x78,0xe0,0x3e,0x3e,0xbc,0xa7,0xf0,0xec,0xb3,0x78,0x4e,0x1f,0xbc,
0xf8,0xe2,0xc1,0x18,0x82,0xf0,0xbd,0x7b,0x9c,0x01,0x9c,0xe0,0xc1,0x03,0xf7,0x5f,
0x03,0xbc,0x04,0x26,0x84,0x03,0x31,0x00,0x1f,0x7e,0x18,0x0c,0x38,0x03,0x38,0x41,
0x50,0xf8,0xea,0x2b,0xd7,0xf1,0xe1,0x25,0x30,0x22,0x1c,0x80,0x21,0x10,0x24,0x03,
0xca,0x00,0x41,0x10,0x15,0x3c,0x0c,0xf0,0x12,0x98,0x11,0x56,0x66,0x18,0x09,0x28,
0x42,0x66,0x80,0x24,0x88,0x08,0x0e,0x06,0x78,0x09,0x1c,0x08,0x2b,0x32,0x4c,0x04,
0xcc,0x20,0x31,0x40,0x12,0x64,0x05,0x2b,0x03,0xbc,0x04,0x2e,0x84,0x95,0x18,0x12,
0x81,0x34,0x88,0x0c,0x28,0x08,0x66,0x05,0x1b,0x03,0xbc,0x04,0x4e,0x84,0x15,0x18,
0x32,0x41,0x0d,0x21,0x30,0x94,0x04,0x33,0x82,0x89,0x01,0x5e,0x02,0x37,0xc2,0x9e,
0x0c,0x84,0xa0,0x6a,0xd0,0x40,0x20,0x0a,0x7d,0x06,0x78,0x09,0x16,0x20,0xec,0xc1,
0x40,0x09,0xea,0x06,0x2d,0x04,0xaa,0xd0,0x63,0x80,0x97,0x60,0x11,0xc2,0x42,0x06,
0x46,0xd0,0x0a,0xc2,0xa7,0x78,0xd4,0x8b,0x42,0x8f,0x01,0x5e,0x82,0x85,0x08,0x0b,
0x18,0x04,0x41,0xcb,0x60,0x40,0xb0,0x28,0x68,0x0c,0xf0,0x12,0x2c,0x46,0x70,0x32,
0x48,0x82,0x56,0x19,0xda,0x08,0x52,0xa1,0xcd,0x00,0x2f,0xc1,0x1e,0x08,0x0e,0x86,
0x82,0xa0,0x1d,0x84,0x80,0x60,0x8a,0x42,0x9b,0x01,0x5e,0x82,0xbd,0x10,0x8c,0x0c,
0x15,0x82,0xb6,0xc1,0x88,0x60,0x55,0xa8,0x33,0x60,0xe1,0xcb,0xf2,0x3e,0xb3,0x80,
0xa0,0x5d,0x06,0x0d,0xa1,0xa6,0x50,0x63,0x40,0x85,0xe0,0xaf,0xfa,0xe0,0x05,0x7d,
0xf0,0x77,0x7d,0x74,0x06,0xe0,0xcc,0x17,0x84,0x88,0xe0,0x88,0xc2,0xc3,0xe2,0xf8,
0x90,0xa7,0xf0,0xcc,0x33,0x07,0x47,0x78,0xf9,0xe5,0xf6,0x25,0x6a,0x98,0xb3,0xb3,
0x33,0xdb,0x55,0x31,0x1a,0x4c,0x08,0x36,0x85,0x81,0xe0,0xe1,0xc3,0x22,0x8d,0x90,
0x04,0x9b,0x20,0x34,0x18,0x80,0x0f,0x3e,0x08,0x06,0x05,0x83,0x52,0x06,0x1d,0x81,
0x2b,0x8c,0x04,0x41,0xe1,0xeb,0xaf,0xd9,0xf1,0x21,0x09,0x36,0x42,0xa8,0x30,0x04,
0x82,0x64,0x20,0x18,0xb4,0x20,0x24,0x84,0x47,0xfd,0xa7,0xe7,0x87,0x69,0x06,0x05,
0xca,0x00,0x49,0xb0,0x19,0x82,0x60,0x18,0x09,0x28,0x02,0x61,0x50,0x0d,0x32,0x82,
0xae,0x40,0x08,0x22,0x02,0x61,0x80,0x24,0xd8,0x10,0x81,0x30,0x4c,0x04,0xcc,0x20,
0x33,0xa8,0x65,0xe8,0x21,0x44,0x05,0x46,0x90,0x15,0x12,0x03,0x24,0xc1,0xa6,0x08,
0x13,0x43,0x22,0x90,0x06,0x13,0x83,0x1e,0x84,0x19,0xa1,0x19,0x05,0x49,0x30,0x2b,
0x44,0x06,0x48,0x82,0x8d,0x11,0x02,0x43,0x22,0xa8,0x21,0x04,0x06,0xdd,0x80,0x20,
0x34,0x14,0x4a,0x82,0x19,0x61,0x64,0x08,0x08,0x57,0x8e,0x9a,0x84,0x9d,0x6e,0x70,
0x86,0x4f,0x6a,0x0c,0x66,0x04,0xe0,0x9b,0x1a,0x02,0x55,0x88,0x08,0x57,0xae,0x1c,
0xed,0x9a,0xb0,0xdb,0xcd,0x08,0x55,0x83,0x01,0xe1,0x93,0x92,0x81,0x18,0x50,0x84,
0x42,0x61,0x20,0xf8,0xa6,0x8e,0x30,0x2b,0x64,0x04,0xca,0xb0,0xe1,0xdd,0x61,0xb7,
0xeb,0x22,0x04,0x83,0x82,0x81,0x1a,0x30,0x04,0xae,0x30,0x12,0xb4,0x14,0x6a,0x08,
0x33,0xc3,0x66,0xcf,0x09,0xbb,0x1d,0x43,0xd0,0x0c,0x04,0x83,0x09,0x21,0x11,0xf4,
0x14,0x18,0x42,0x62,0xd8,0xe8,0x89,0x71,0xb7,0xe3,0x08,0xed,0x32,0x14,0x0c,0xcc,
0x80,0x23,0x64,0x05,0x42,0xd0,0x29,0x84,0x40,0x88,0x0c,0x9b,0xbc,0x3b,0xec,0x76,
0x26,0x04,0x6a,0x90,0x19,0xb8,0x81,0x40,0x88,0x0a,0x8c,0xa0,0x13,0x85,0x02,0x21,
0x30,0x6c,0xf0,0x16,0xb9,0xdb,0x15,0x08,0x16,0x83,0x89,0xa1,0x8b,0x20,0x09,0x74,
0x85,0x0a,0xc2,0x15,0x1c,0x7e,0x76,0x25,0x42,0xbf,0x0c,0x33,0xc3,0xa7,0x2a,0xc2,
0xa3,0x0a,0x81,0x5a,0x88,0x12,0x01,0xb8,0x7a,0x75,0x38,0xcd,0xe7,0x95,0xc1,0xdf,
0xf4,0xc1,0x4b,0xca,0x0c,0x3f,0xfb,0xed,0xb7,0x39,0x03,0x1c,0x41,0x08,0x08,0xf7,
0xa1,0x5e,0x13,0xf0,0x5d,0x0d,0x41,0x89,0x82,0x44,0x08,0x04,0x03,0xc2,0x2b,0xaf,
0x68,0x0c,0x7b,0x20,0x00,0x6f,0xbe,0x39,0x20,0x70,0x06,0xb8,0x0c,0x06,0x84,0xfb,
0x9c,0x01,0x9c,0xe0,0xbb,0x3a,0x42,0x5b,0x81,0x23,0x44,0x82,0xa8,0xa0,0x30,0x2c,
0x46,0x08,0x04,0xd1,0x80,0x31,0xc0,0x53,0x86,0xd1,0x80,0x33,0x80,0x13,0xb4,0x14,
0x9a,0x85,0xa0,0x08,0x99,0x60,0x52,0x68,0x32,0x2c,0x44,0x18,0x09,0xb2,0x01,0x61,
0x80,0xaf,0x0c,0x69,0x50,0x7c,0x4f,0x98,0x08,0x5c,0x0a,0x0c,0x81,0x12,0x4c,0x08,
0x2d,0x86,0x45,0x08,0x91,0x80,0x21,0x24,0x06,0x78,0xcb,0x20,0x18,0x20,0x09,0x9c,
0x85,0x48,0x08,0x9c,0x60,0x56,0xa8,0x32,0x2c,0x40,0x48,0x04,0xdc,0x60,0x62,0x80,
0xbf,0x0c,0x8c,0x01,0x92,0xc0,0x59,0x88,0x88,0x50,0x10,0x10,0x85,0x0a,0x83,0x1b,
0x21,0x13,0x14,0x06,0x23,0x03,0xb0,0xd4,0x20,0x32,0xa0,0x20,0xf0,0x15,0x22,0x22,
0x5c,0xbd,0xaa,0x20,0x94,0x0c,0x4e,0x84,0x99,0xa0,0x8a,0x30,0x30,0x2c,0x2b,0xc3,
0xcc,0x50,0x12,0xf8,0x0a,0x11,0x93,0xd0,0x51,0x10,0x0c,0x2e,0x04,0x4a,0xd0,0x30,
0xa8,0x46,0x01,0x56,0x83,0x06,0x82,0x39,0x0a,0x80,0x82,0xc0,0x14,0x18,0x83,0x03,
0x81,0x11,0xd4,0x0d,0x06,0x84,0x8f,0x3f,0x2e,0x18,0xec,0x06,0x2d,0x04,0x9b,0x02,
0xf0,0xed,0xb7,0x11,0xe1,0x9f,0xdd,0x28,0x30,0x06,0x33,0x02,0x27,0x68,0x05,0xe1,
0xdd,0x01,0x41,0x32,0xd8,0xcb,0x70,0x1f,0x5f,0xe0,0x7b,0x7b,0x14,0xb8,0x42,0x20,
0xc8,0x08,0x26,0x85,0xcc,0x60,0x44,0x90,0x04,0x2d,0x83,0x88,0xc0,0x19,0x1c,0x65,
0xf8,0x62,0x40,0xf8,0x7e,0x51,0x21,0x22,0x41,0x07,0xa1,0x50,0x98,0x18,0x4c,0x08,
0x05,0x41,0xab,0x0c,0x19,0x81,0x30,0x78,0xca,0xd0,0x46,0xd0,0x15,0x12,0xc1,0x8c,
0x60,0x8b,0xc2,0xc4,0x60,0x40,0x28,0x09,0xda,0x41,0x98,0x11,0x12,0x83,0xab,0x0c,
0x23,0x82,0xbb,0x10,0x33,0x01,0x41,0x30,0x2b,0x0c,0x0c,0x5d,0x84,0x1a,0x41,0xdb,
0x80,0x22,0x44,0x06,0x57,0x19,0x22,0x82,0xaf,0x10,0x94,0xa0,0x8b,0xd0,0x52,0xe8,
0x8d,0xd5,0xa0,0x82,0x10,0x18,0x5c,0x65,0xd0,0x10,0x1a,0x0a,0x8c,0x80,0x22,0x58,
0xa3,0x00,0x9c,0x9c,0x0c,0xbf,0xe6,0x3f,0x5a,0x33,0xfc,0xd9,0x5b,0x6f,0x55,0x18,
0xda,0x41,0x28,0x10,0xce,0x6b,0x0c,0xed,0x20,0x44,0x04,0x73,0x14,0x80,0xc7,0x6d,
0x04,0xe3,0x7d,0xf2,0x64,0x18,0xbc,0xfa,0x6a,0x83,0x01,0xb8,0x79,0x73,0x40,0x28,
0x19,0x14,0x83,0x12,0xe1,0xbc,0x64,0x50,0x0c,0x26,0x04,0x9b,0xc2,0x40,0xf0,0xd8,
0x8d,0x20,0x1e,0x1c,0x4f,0xe2,0x0c,0x0a,0x35,0x86,0x40,0x10,0x0d,0x24,0x83,0x52,
0x06,0x89,0x10,0x0c,0x0a,0x06,0xa5,0x0c,0x3a,0x02,0x57,0x18,0x09,0x0a,0x05,0x8a,
0xd0,0x8b,0x42,0x26,0x98,0x14,0x24,0xc3,0x48,0x90,0x0d,0x38,0x83,0x16,0x04,0x71,
0x61,0x3c,0x4f,0x43,0x19,0xb4,0x20,0x24,0x84,0x6e,0x14,0x12,0x81,0x54,0x60,0x08,
0xaa,0x02,0x25,0x98,0x10,0x18,0x43,0x24,0x60,0x08,0x33,0x83,0x6a,0xd0,0x42,0x20,
0x0c,0xaa,0x41,0x46,0xd0,0x15,0x08,0x81,0x1f,0x61,0xfa,0xd6,0x76,0xc2,0x67,0x52,
0x48,0x0c,0x89,0x80,0x1b,0x24,0x06,0xb5,0x0c,0x1c,0x81,0x1a,0x64,0x06,0xb5,0x0c,
0x3d,0x84,0xa8,0xc0,0x08,0x84,0x02,0x47,0x68,0x45,0xa1,0x20,0x20,0x0a,0x81,0x21,
0x13,0x14,0x06,0x91,0x41,0x0f,0x02,0x7b,0x58,0x3a,0x97,0x13,0x18,0xf4,0x20,0xcc,
0x08,0xcd,0x28,0x48,0x02,0xae,0x20,0x10,0xaa,0x0a,0x35,0x02,0x82,0x30,0x30,0xdc,
0xbc,0xa9,0x20,0x04,0x06,0xd5,0x40,0x47,0x08,0x0c,0xba,0x01,0x41,0x68,0x28,0x94,
0x04,0x4e,0x04,0xe0,0xda,0xb5,0x8e,0x02,0x3a,0x06,0xb7,0x6e,0x55,0x18,0xaa,0x08,
0x35,0x83,0x73,0x7c,0x5e,0x63,0x98,0xcb,0x80,0x1f,0xa1,0x15,0x02,0x78,0x52,0x43,
0x20,0x0a,0x12,0x41,0x2a,0x04,0x82,0x06,0x02,0x29,0x84,0x6a,0x10,0x10,0x4a,0x06,
0x62,0x40,0x5e,0xa0,0xce,0xeb,0x08,0x9f,0x97,0x0c,0x98,0x09,0xc2,0xa0,0x75,0x87,
0x18,0x08,0x9e,0xd4,0x11,0x1e,0xa3,0x89,0xc0,0x14,0x22,0xc1,0xb5,0x5e,0x14,0xd0,
0x0b,0xc2,0xad,0x82,0x81,0x1a,0x74,0x10,0x82,0x41,0xc1,0x00,0x46,0x40,0x19,0x50,
0x10,0xb4,0x14,0x4c,0x08,0x99,0xa0,0xa7,0x00,0x8b,0x01,0x67,0xa8,0x22,0x68,0x06,
0x82,0x01,0x82,0x60,0x66,0x40,0x49,0xd0,0x53,0x28,0x11,0x92,0x02,0x25,0xe8,0x14,
0x02,0xdd,0x32,0x48,0x06,0x66,0x90,0x3f,0xaa,0x9c,0xeb,0x08,0x84,0x01,0x25,0x41,
0x66,0x40,0x49,0xd0,0x29,0x44,0x05,0x61,0x54,0xe0,0x04,0x9d,0x28,0xc0,0x16,0x84,
0x99,0x81,0x1b,0xa8,0x08,0xd4,0x20,0x33,0xa0,0x4a,0x90,0x18,0x50,0x10,0x74,0xa2,
0x50,0x47,0x28,0x08,0x74,0x05,0xd8,0x0d,0x22,0x43,0x15,0xc1,0x62,0x30,0x31,0xa0,
0x41,0x10,0x19,0x50,0x12,0xe8,0x0a,0x55,0x84,0x0a,0x81,0x5a,0x08,0x18,0xcb,0x30,
0x33,0x54,0x10,0xfa,0x65,0x98,0x19,0xba,0xf3,0xe4,0x89,0x0d,0xe1,0x31,0x1a,0x17,
0x46,0x9c,0x9e,0xda,0x15,0x3a,0x08,0x75,0x83,0xdb,0xb7,0x01,0x1b,0x42,0xc3,0xe0,
0xdf,0xfa,0x38,0x14,0xaa,0x08,0x81,0xa0,0x81,0xd0,0x56,0x80,0xcb,0x20,0x20,0x70,
0x06,0x38,0x0c,0x80,0x8b,0x8b,0x2e,0xc2,0x2f,0xbf,0xd4,0x18,0x9a,0x0a,0xe2,0x05,
0x6a,0x24,0x38,0xf5,0x44,0x61,0xfc,0xc0,0xe2,0x2b,0xc3,0xed,0x38,0xa0,0x2f,0x50,
0xc6,0x32,0x04,0x02,0x13,0x42,0x8d,0xa1,0x59,0x08,0xf6,0x51,0x25,0x11,0x9c,0x3a,
0x0b,0x01,0x67,0x19,0x6e,0x0b,0x06,0x18,0x83,0x10,0x09,0x8c,0x08,0x15,0x06,0x74,
0x11,0x28,0x81,0xb3,0x10,0x70,0x97,0x81,0x33,0xc0,0x78,0x77,0xbc,0xb8,0x70,0x21,
0x94,0x0c,0x0d,0x85,0xfc,0x8f,0x2f,0x8c,0xc0,0x59,0x08,0x2c,0x28,0x03,0x65,0x80,
0xa1,0x0c,0x33,0x81,0x03,0x41,0x32,0x34,0x0a,0x91,0xfe,0x7f,0xc2,0x69,0x31,0x8e,
0x42,0x00,0x8b,0x0d,0x46,0x06,0xa0,0xff,0xa8,0x78,0x71,0xb1,0x08,0x41,0x30,0x40,
0x41,0x38,0x3d,0x35,0x22,0x54,0x15,0xea,0x08,0x86,0x32,0x64,0x86,0x8e,0x01,0x27,
0x70,0x22,0x70,0x86,0xba,0x42,0x4c,0x82,0x59,0x01,0x15,0x82,0xd7,0xf0,0x4e,0x85,
0x01,0x76,0x83,0x6a,0x14,0xd0,0x22,0x70,0x23,0x50,0x06,0xd4,0x82,0xa0,0x20,0x98,
0x14,0x06,0x82,0xd7,0x06,0x84,0x77,0x0a,0x06,0xbb,0xc1,0x80,0xf0,0xd9,0x67,0x05,
0x03,0x9a,0x04,0x0b,0x10,0x08,0x03,0x0a,0x82,0xa7,0x4f,0x23,0xc2,0x1b,0x0b,0x0b,
0x31,0x12,0x44,0x04,0xc1,0xe0,0x29,0xc3,0xfb,0x03,0x82,0x64,0x40,0x9b,0x60,0x11,
0xc2,0xcc,0x00,0x49,0x90,0x11,0xde,0x58,0x52,0x88,0x89,0x20,0x21,0x30,0x06,0x47,
0x19,0xde,0x8f,0x08,0x9c,0x01,0x6d,0x82,0x85,0x08,0x89,0x01,0x92,0xa0,0x83,0xa0,
0x2a,0x64,0x82,0x19,0x61,0x66,0xf0,0x94,0x21,0x23,0x10,0x06,0x28,0x04,0x8b,0x11,
0x26,0x06,0x08,0x82,0x19,0xc1,0x5b,0x08,0x42,0x40,0x11,0x26,0x06,0x57,0x19,0x08,
0x42,0x62,0x80,0x46,0xb0,0x07,0x42,0x64,0x00,0x27,0x20,0x08,0xae,0x42,0x30,0x02,
0x8e,0x30,0x32,0xb8,0xca,0xc0,0x10,0x22,0x03,0x34,0x82,0xbd,0x10,0x02,0x03,0x38,
0x41,0x17,0xa1,0xaa,0x20,0x08,0x24,0x42,0x60,0xf0,0x94,0x41,0x20,0x04,0x86,0x83,
0xcf,0xd3,0xa7,0x75,0x04,0x6b,0x14,0x80,0xd7,0x5f,0x87,0x8a,0x80,0xf7,0xde,0xab,
0x30,0xb4,0x83,0x20,0x10,0x86,0x73,0xfc,0x97,0x3e,0xf8,0x59,0x1f,0xfc,0xa6,0x8f,
0x54,0x20,0x08,0x26,0x85,0x40,0x60,0x40,0x28,0x19,0x14,0x03,0x86,0x00,0xfc,0xf0,
0xc3,0xc1,0x11,0x7e,0xff,0x9d,0x31,0x74,0x11,0x98,0x42,0x24,0x28,0x14,0x50,0x1a,
0x48,0x06,0xa5,0x0c,0x14,0x21,0x10,0x6c,0x82,0xc0,0x18,0x28,0x42,0x2f,0x0a,0x99,
0x40,0x2a,0xa0,0x66,0xc0,0x19,0xb4,0x20,0x64,0x84,0x48,0xb0,0x11,0x02,0x61,0x60,
0x08,0xaa,0x02,0x25,0x30,0x22,0xcc,0x0c,0xaa,0xc1,0x84,0x90,0x08,0x36,0x43,0xc8,
0x0c,0x06,0x84,0x51,0x81,0x13,0x08,0x05,0xb4,0x0c,0x12,0x83,0x5a,0x86,0x88,0x30,
0x13,0x6c,0x88,0x30,0x31,0x70,0x84,0x56,0x14,0x0a,0x02,0xae,0x80,0xb6,0x41,0x64,
0xd0,0x83,0x30,0x20,0x50,0x82,0x4d,0x11,0x46,0x86,0xe9,0x2d,0x52,0x55,0xa8,0x11,
0x38,0x10,0x02,0x83,0x6e,0xc0,0x09,0x36,0x46,0x08,0x0c,0x69,0x25,0x8d,0x26,0x02,
0x70,0xfd,0x7a,0x47,0x01,0x1d,0x83,0xbb,0x77,0x2b,0x0c,0xf9,0xaa,0x18,0x57,0xd2,
0x38,0x62,0x12,0xe8,0x9a,0x2a,0x55,0x85,0x40,0xd0,0x40,0x98,0x15,0xa0,0x1a,0x04,
0x84,0x92,0x01,0x84,0xe0,0x52,0x30,0x6c,0x7a,0x4d,0x90,0xab,0xeb,0x14,0x0a,0x91,
0xe0,0x7a,0x2f,0x0a,0xe8,0x05,0xe1,0x6e,0xc1,0x00,0x4e,0xc0,0x19,0x36,0xbc,0x3b,
0xd4,0xd6,0x59,0x62,0x08,0x99,0xa0,0xa7,0x00,0x8b,0x01,0x67,0x80,0x24,0xa0,0x0c,
0x9b,0x3d,0x27,0xb4,0x56,0xdc,0xca,0x0a,0x94,0xa0,0x53,0x08,0x74,0xcb,0x20,0x19,
0x50,0x21,0x98,0x19,0x36,0x7a,0x62,0xd4,0xd6,0x5e,0x1b,0xbf,0x38,0x72,0x82,0x4e,
0x14,0x60,0x0b,0xc2,0xcc,0xa0,0xac,0xc4,0xb7,0xd9,0xbb,0x43,0x6f,0x15,0xbe,0x92,
0x40,0x57,0x80,0xdd,0x20,0x32,0x74,0x56,0xe1,0xdb,0xe0,0x2d,0xd2,0xb2,0x1e,0xe3,
0x75,0x23,0x42,0x54,0x80,0xb1,0x0c,0x59,0x61,0x8d,0xcd,0x13,0x56,0x5d,0x0f,0xb2,
0xb1,0x32,0xa7,0x27,0x0a,0xf0,0x05,0xc1,0xb4,0x32,0xe7,0x4f,0xca,0xe0,0x57,0x7d,
0xf0,0x5f,0x65,0xac,0x2b,0x73,0x36,0x18,0x9a,0x0a,0xb0,0x1b,0x38,0xd6,0x68,0x3d,
0x08,0x82,0x67,0x8d,0xd6,0x2a,0x43,0xb3,0x10,0xb0,0x96,0xc1,0xb9,0x5a,0xef,0xea,
0x08,0xde,0xd5,0x7a,0x6b,0x0c,0x70,0x22,0x60,0x0f,0x02,0x8d,0x61,0x21,0xc2,0x92,
0x75,0x9b,0x2b,0x0c,0x0d,0x05,0x58,0x0c,0x16,0xae,0xe0,0xbd,0x1a,0xc2,0xd2,0x15,
0xbc,0x0b,0x86,0x46,0x21,0xd0,0x2f,0xc3,0x1e,0x6b,0xb9,0xaf,0x82,0xb0,0xcf,0x5a,
0xee,0x92,0x01,0x0e,0x04,0xac,0x40,0x50,0x67,0x70,0x23,0xec,0xbb,0xaa,0xbf,0x60,
0x80,0x19,0x01,0xeb,0x10,0xd4,0x18,0x9c,0x08,0x6b,0xec,0xef,0xc0,0x18,0x50,0x21,
0xb8,0x81,0x3b,0x15,0x06,0xac,0x45,0x50,0x32,0xb8,0x10,0xd6,0xda,0xe9,0x83,0x32,
0xa0,0x20,0xb8,0x31,0x20,0xdc,0x29,0x18,0xb0,0x22,0x81,0x64,0x70,0x20,0xac,0xb9,
0xe7,0x0b,0x61,0x80,0x24,0x88,0x08,0x82,0x01,0xeb,0x12,0x70,0x06,0x33,0xc2,0xda,
0xbb,0xff,0x64,0x06,0x48,0x82,0x84,0xc0,0x18,0xb0,0x36,0x01,0x65,0x30,0x22,0x1c,
0x62,0x1f,0xa8,0xc4,0x00,0x41,0x30,0x23,0xcc,0x0c,0x38,0x00,0xc1,0xcc,0x60,0x42,
0x38,0xd4,0x8e,0x60,0xe9,0x0d,0x8f,0x13,0x50,0x84,0x89,0xe1,0x80,0x5b,0xe4,0x05,
0x06,0x03,0xc2,0x21,0xf7,0x86,0x8b,0xa7,0xc1,0x09,0x38,0xc2,0xc8,0x70,0xe0,0x5d,
0x02,0xd7,0xdf,0xa5,0x70,0xd1,0x7e,0x91,0x37,0x14,0x84,0x3b,0x1b,0xec,0x17,0xf9,
0x1f,0x6d,0xb6,0xd8,0x2f,0xb2,0x64,0xc0,0xa6,0x04,0x1d,0x86,0xad,0x76,0x0e,0x95,
0x0c,0xd8,0x98,0x40,0x61,0xd8,0x72,0x0f,0x59,0xce,0x80,0xcd,0x09,0x1a,0x0c,0x5b,
0xef,0x26,0x4c,0x19,0x70,0x04,0x82,0x0a,0xc3,0x31,0xf6,0x95,0x9e,0x19,0x70,0x14,
0x02,0xc1,0x70,0xac,0x1d,0xc6,0x13,0x03,0x8e,0x44,0x40,0x18,0x8e,0xb9,0xd7,0x7c,
0xbe,0x6f,0x5f,0x1e,0x6f,0x06,0x86,0xfd,0x5f,0xd6,0x57,0x38,0x8d,0xcb,0xe3,0x0e,
0xfe,0xef,0x7f,0x83,0x3f,0xc4,0xfc,0x4f,0x80,0x01,0x00,0x60,0x38,0x4c,0xcf,0x66,
0x49,0x4f,0xf4,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82,
};

char htmlHeader[] ="<!DOCTYPE html><html><head><title>MasterSkewbScramble</title></head><body><table border=1>";
char htmlFooter[] ="</table></html>";

#define SWAP(A,B) {int __T=A;A=B;B=__T;}


unsigned int x = 123456789;
unsigned int y = 362436069;
unsigned int z = 521288629;
unsigned int w = 88675123; 

unsigned int xor128(void) {
  unsigned int t;
 
  t = x ^ (x << 11);
  x = y; y = z; z = w;
  return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)); 
}

void Base64(unsigned char* in, int size, char* out)
{
	unsigned int temp;
	int i;
	char* base64char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	for(i = 0 ; i < size/3 ; i++)
	{
		temp = in[i*3+0]*65536+in[i*3+1]*256+in[i*3+2];
		out[i*4+0]=base64char[(temp>>18)&63];
		out[i*4+1]=base64char[(temp>>12)&63];
		out[i*4+2]=base64char[(temp>> 6)&63];
		out[i*4+3]=base64char[(temp    )&63];
	}
	out[i*4]=0;
}

   /* Table of CRCs of all 8-bit messages. */
   unsigned long crc_table[256];
   
   /* Flag: has the table been computed? Initially false. */
   int crc_table_computed = 0;
   
   /* Make the table for a fast CRC. */
   void make_crc_table(void)
   {
     unsigned long c;
     int n, k;
   
     for (n = 0; n < 256; n++) {
       c = (unsigned long) n;
       for (k = 0; k < 8; k++) {
         if (c & 1)
           c = 0xedb88320L ^ (c >> 1);
         else
           c = c >> 1;
       }
       crc_table[n] = c;
     }
     crc_table_computed = 1;
   }
  

   /* Update a running CRC with the bytes buf[0..len-1]--the CRC
      should be initialized to all 1's, and the transmitted value
      is the 1's complement of the final running CRC (see the
      crc() routine below). */
   
   unsigned long update_crc(unsigned long crc, unsigned char *buf,
                            int len)
   {
     unsigned long c = crc;
     int n;
   
     if (!crc_table_computed)
       make_crc_table();
     for (n = 0; n < len; n++) {
       c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
     }
     return c;
   }
   
   /* Return the CRC of the bytes buf[0..len-1]. */
   unsigned long CRC(unsigned char *buf, int len)
   {
     return update_crc(0xffffffffL, buf, len) ^ 0xffffffffL;
   }





class CMasterSkewb
{
public:
	int m_colorTable[78];
	void Init();
	void TiltU2();
	void TiltR();
	void R();
	void Rw();
	void DR();
	void L();
	void Lw();
	void DL();
	void Rotation(int x);
};

void CMasterSkewb::Init()
{
	int i;
	for(i = 0 ; i < 78 ; i++)
	{
		m_colorTable[i] = i/13+1;
	}
}

void CMasterSkewb::TiltR()
{
	int i;
	for(i = 0 ; i < 78/2 ; i++)
	{
		SWAP(m_colorTable[i], m_colorTable[77-i]);
	}
}

void CMasterSkewb::TiltU2()
{
	int i;
	for(i = 0 ; i < 6 ; i++)
	{
		SWAP(m_colorTable[i], m_colorTable[12-i]);
		SWAP(m_colorTable[i+65], m_colorTable[12-i+65]);
	}
	for(i = 13 ; i < 39 ; i++)
	{
		SWAP(m_colorTable[i], m_colorTable[i+26]);
	}
}
void CMasterSkewb::R()
{
	int i;
	int table[] = {12,39,28,12,7,44,27,7,9,42,30,9,11,40,33,11,2,49,26,2,4,47,29,4,6,45,32,6,8,43,35,8,10,41,38,10,52,65,15,52};
	int t = 0;
	for(i = 0 ; i < 40 ; i++)
	{
		SWAP(m_colorTable[table[i]], t);
	}
}
void CMasterSkewb::Rw()
{
	int i;
	int table[] = {1,50,31,1,3,48,34,3,5,46,37,5,14,57,70,14,17,55,68,17,20,53,66,20};
	int t = 0;
	for(i = 0 ; i < 24 ; i++)
	{
		SWAP(m_colorTable[table[i]], t);
	}
	R();
}
void CMasterSkewb::L()
{
	TiltU2();
	R();
	TiltU2();
}
void CMasterSkewb::Lw()
{
	TiltU2();
	Rw();
	TiltU2();
}
void CMasterSkewb::DR()
{
	TiltR();
	R();
	TiltR();
}
void CMasterSkewb::DL()
{
	TiltR();
	L();
	TiltR();
}

void CMasterSkewb::Rotation(int x)
{
	switch(x)
	{
	case 0:R();break;
	case 1:L();break;
	case 2:DR();break;
	case 3:DL();break;
	case 4:Lw();break;
	case 5:Rw();break;
	}
}


void CreateScramble(int length, char* bufscr, char* bufimg)
{
	if(length > 200)
	{
		return;
	}
	int i;
	int scramble[200];
	int direction[200];
	for(i = 0 ; i < length ; i++)
	{
		if(i > 1 && scramble[i-1] + scramble[i-2] == 3)
		{
			scramble[i] = scramble[i-1] ^ 1 ^ (xor128() % 2 * 3);
		}
		else if(i)
		{
			int r = xor128() % 5;
			if(r == 4)
			{
				scramble[i] = scramble[i-1] ^ 3;
			}
			else
			{
				scramble[i] = scramble[i-1] ^ 1 ^ (r % 2 * 3);
			}
		}
		else
		{
			scramble[i] = xor128() % 4;
		}
	}
	for(i = 0 ; i < length ; i++)
	{
		if(scramble[i] > 1 && xor128() % 2)
		{
			scramble[i] += 2;
		}
		direction[i] = xor128() % 2;
	}
	char Rot[][4] = {"R", "L", "DR", "DL", "Lw", "Rw" };
	char buf[8];
	CMasterSkewb cube;
	cube.Init();
	int j;
	char* pscr = bufscr;
	for(i = 0 ; i < length ; i++)
	{
		for(j = 0 ; j <= direction[i] ; j++)
		{
			cube.Rotation(scramble[i]);
		}
		sprintf(buf, "%s%s", Rot[scramble[i]], direction[i] ? "\'" : "");
		sprintf(pscr, " %-3s", buf);
		while(*pscr)pscr++;
		if(i % 10 == 9)
		{
			sprintf(pscr, " <br>");
			while(*pscr)pscr++;
		}
	}
	unsigned char color[6][3] = {
		{0xFF, 0xFF, 0xFF},
		{0x00, 0xFF, 0x00},
		{0xF0, 0x00, 0x00},
		{0x00, 0x40, 0xFF},
		{0xFF, 0x80, 0x00},
		{0xFF, 0xFF, 0x00},
	};
	for(i = 0 ; i < 78 ; i++)
	{
		pngImage[paletteOffset+3+i*3+0] = color[cube.m_colorTable[i]-1][0];
		pngImage[paletteOffset+3+i*3+1] = color[cube.m_colorTable[i]-1][1];
		pngImage[paletteOffset+3+i*3+2] = color[cube.m_colorTable[i]-1][2];
	}
	unsigned long crc = CRC(pngImage+paletteOffset-4, 244);
	pngImage[paletteOffset+240] = crc >> 24;
	pngImage[paletteOffset+241] = crc >> 16;
	pngImage[paletteOffset+242] = crc >> 8;
	pngImage[paletteOffset+243] = crc;
	Base64(pngImage, imageSize, bufimg);
}

int main(void)
{
	FILE* file;
	file = fopen("Scramble.html", "w");
	srand(time(NULL));
	x ^= rand();
	y ^= rand();
	z ^= rand();
	w ^= rand();
	int i;
	for(i = 0 ; i < 3141 ; i++)
	{
		xor128();
	}
	make_crc_table();
	char bufscr[256];
	char bufimg[10000];
	fputs(htmlHeader, file);
	for(i = 0 ; i < 10 ; i++)
	{
		CreateScramble(40, bufscr, bufimg);
		fprintf(file, "<tr><td>#%d</td><td><pre>%s</pre></td>", i+1,bufscr);
		fprintf(file, "<td><img src=\"data:image/png;base64,%s\"></td></tr>", bufimg);
	}
	fputs(htmlFooter, file);
	fclose(file);
	return 0;
}

